{"version":3,"sources":["../../../src/services/customer.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;;;;;IAEa,e,WAAA,e;AAET,6BAAa,aAAb,EAA4B,MAA5B,EAAoC;AAAA;;AAChC,aAAK,cAAL,GAAsB,aAAtB;AACA,aAAK,OAAL,GAAe,MAAf;AACH;;;;gCAEQ,U,EAAY;AACjB,mBAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,UAA5B,CAAP;AACH;;;6CAEqB,e,EAAiB;AACnC,mBAAO,KAAK,cAAL,CAAoB,oBAApB,CAAyC,eAAzC,CAAP;AACH;;;4BAEI,O,EAAS;AAAA;;AAEV,mBAAO,KAAK,gBAAL,CAAsB,OAAtB,EACF,IADE,CACG,mBAAW;AACb,uBAAO,MAAK,cAAL,CAAoB,GAApB,CAAwB,OAAxB,CAAP;AACH,aAHE,CAAP;AAIH;;;yCAEgB,O,EAAS;AAAA;;AAEtB,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;;;AAG5B,uBAAK,OAAL,CAAa,IAAb,CAAkB,sCAAsC,KAAK,SAAL,CAAe,OAAf,CAAxD;AACA,oBAAI,OAAQ,QAAQ,IAAT,GAAiB,IAAI,IAAJ,CAAS,QAAQ,IAAjB,CAAjB,GAA0C,IAAI,IAAJ,EAArD;AACA,oBAAI,KAAM,QAAQ,EAAT,GAAe,IAAI,IAAJ,CAAS,QAAQ,EAAjB,CAAf,GAAsC,IAAI,IAAJ,EAA/C;;AAEA,oBAAI,OAAO,EAAX,EAAe;;AAEX,2BAAK,OAAL,CAAa,KAAb,CAAmB,sDAAsD,IAAtD,GAA6D,cAA7D,GAA8E,EAAjG;AACA,0BAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AAEH;;AAED,oBAAI,CAAC,sBAAO,IAAP,EAAa,OAAb,EAAD,IAA2B,CAAC,sBAAO,EAAP,EAAW,OAAX,EAAhC,EAAsD;;AAElD,2BAAK,OAAL,CAAa,KAAb,CAAmB,wEAAnB;AACA,0BAAM,IAAI,KAAJ,CAAU,wEAAV,CAAN;AAEH;;AAED,oBAAI,iBAAiB;;AAEjB,4BAAS,sBAAO,IAAP,EAAa,MAAb,CAAoB,YAApB,CAFQ;AAGjB,0BAAO,sBAAO,EAAP,EAAW,MAAX,CAAkB,YAAlB;AAHU,iBAArB;;AAMA,wBAAQ,cAAR;AAEH,aA7BM,CAAP;AA+BH","file":"customer.js","sourcesContent":["\"use strict\";\n\nimport moment from \"moment\";\n\nexport class CustomerService {\n\n    constructor (customerStore, logger) {\n        this._customerStore = customerStore;\n        this._logger = logger;\n    }\n\n    getById (customerId) {\n        return this._customerStore.getById(customerId);\n    }\n\n    getByMerlinAccountNo (merlinAccountNo) {\n        return this._customerStore.getByMerlinAccountNo(merlinAccountNo);\n    }\n\n    get (filters) {\n\n        return this._validateFilters(filters)\n            .then(filters => {\n                return this._customerStore.get(filters);\n            });\n    }\n\n    _validateFilters(filters) {\n\n        return new Promise((resolve) => {\n\n            // Dates\n            this._logger.info(\"validating dates from the filter \" + JSON.stringify(filters));\n            let from = (filters.from) ? new Date(filters.from) : new Date();\n            let to = (filters.to) ? new Date(filters.to) : new Date();\n\n            if (from > to) {\n\n                this._logger.error(\"from date was greater than to date! From Date -> \" + from + \" To Date -> \" + to);\n                throw new Error(\"From date cannot be greater than to date.\");\n\n            }\n\n            if (!moment(from).isValid() || !moment(to).isValid()) {\n\n                this._logger.error(\"Invalid from or to date please make sure the date format is YYYY-MM-DD\");\n                throw new Error(\"Invalid from or to date please make sure the date format is YYYY-MM-DD\");\n\n            }\n\n            let cleanedFilters = {\n\n                \"from\" : moment(from).format(\"YYYY-MM-DD\"),\n                \"to\" : moment(to).format(\"YYYY-MM-DD\")\n            };\n\n            resolve(cleanedFilters);\n\n        });\n\n    }\n}\n"]}