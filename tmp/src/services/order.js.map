{"version":3,"sources":["../../../src/services/order.js"],"names":[],"mappings":"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","file":"order.js","sourcesContent":["\"use strict\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class OrderService {\n\n    constructor (orderStore, logger) {\n        this._orderStore = orderStore;\n        this._logger = logger;\n    }\n\n    getById(orderReference) {\n        return this._orderStore.getById(orderReference);\n    }\n\n    get (filters) {\n\n        return this._validateFilters(filters)\n            .then(filters => {\n                this._logger.info(\"Filters are valid getting data... \" + JSON.stringify(filters));\n                return this._orderStore.get(filters);\n            });\n\n    }\n\n    _validateFilters (filters) {\n\n        return new Promise((resolve) => {\n\n            // Dates\n            this._logger.info(\"validating dates from the filter \" + JSON.stringify(filters));\n\n            let from = (filters.from) ? new Date(filters.from) : new Date();\n            let to = (filters.to) ? new Date(filters.to) : new Date();\n\n            if (from > to) {\n\n                this._logger.error(\"from date was greater than to date! From Date -> \" + from + \" To Date -> \" + to);\n                throw new Error(\"From date cannot be greater than to date.\");\n\n            }\n\n            if (!moment(from).isValid() || !moment(to).isValid()) {\n\n                this._logger.error(\"Invalid from or to date please make sure the date format is YYYY-MM-DD\");\n                throw new Error(\"Invalid from or to date please make sure the date format is YYYY-MM-DD\");\n\n            }\n\n            // Payment Type\n            let availablePaymentType = [\n                \"payment_required\",\n                \"partial_dispatched\",\n                \"dispatched\",\n                \"payment_rejected\",\n                \"payment_authorised\",\n                \"pending\",\n                \"paid\"\n            ];\n\n            let filteredPaymentType = [];\n\n            this._logger.info(\"validating payment from the filter \" + JSON.stringify(filters));\n\n            let paymentType = (filters.payment) ? filters.payment : [];\n\n            if (_.indexOf(paymentType, \"paid\") === -1) {\n\n                _.forEach(paymentType,(payment) => {\n\n                    if (_.indexOf(availablePaymentType, payment) === -1) {\n\n                        this._logger.error(payment + \" is an invalid payment type\");\n                        this._logger.error(\"Payment type was \" + paymentType);\n                        throw new Error(\n                            payment + \" is an invalid payment type! Please use \" + JSON.stringify(availablePaymentType)\n                        );\n\n                    } else {\n                        filteredPaymentType.push(payment);\n                    }\n                });\n\n            } else {\n\n                if (_.indexOf(filteredPaymentType, \"partial_dispatched\") === -1) {\n                    filteredPaymentType.push(\"partial_dispatched\");\n                }\n\n                if (_.indexOf(filteredPaymentType, \"dispatched\") === -1) {\n                    filteredPaymentType.push(\"dispatched\");\n                }\n\n                if (_.indexOf(filteredPaymentType, \"payment_authorised\") === -1) {\n                    filteredPaymentType.push(\"payment_authorised\");\n                }\n\n                if (_.indexOf(filteredPaymentType, \"pending\") === -1) {\n                    filteredPaymentType.push(\"pending\");\n                }\n            }\n\n            let cleanedFilters = {\n\n                \"from\" : moment(from).format(\"YYYY-MM-DD\"),\n                \"to\" : moment(to).format(\"YYYY-MM-DD\"),\n                \"paymentType\" : filteredPaymentType\n            };\n\n            resolve(cleanedFilters);\n\n        });\n    }\n}\n"]}