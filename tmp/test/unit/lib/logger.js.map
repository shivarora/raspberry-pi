{"version":3,"sources":["../../../../test/unit/lib/logger.js"],"names":[],"mappings":";;;;AAIA;;;;AAIA;;;;AAMA;;AACA;;;;;;;;;AAGA,SAAS,QAAT,EAAmB,YAAY;;AAE3B,aAAS,SAAT,EAAoB,YAAY;;AAE5B,iBAAS,cAAT,EAAyB,YAAY;;AAEjC,eAAG,8BAAH,EAAmC,YAAY;AAC3C,iCAAM,IAAN,mBAAmB,cAAnB,EAAmC,OAAnC,CAA2C,QAA3C;AACA,oBAAI,MAAM,oBAAV;AACA,uCAAO,IAAI,IAAX,EAAiB,EAAjB,CAAoB,EAApB,CAAuB,KAAvB,CAA6B,QAA7B;AACA,iCAAO,YAAP,CAAoB,OAApB;AACH,aALD;AAMH,SARD;AASH,KAXD;;AAaA,aAAS,OAAT,EAAkB,YAAY;;AAE1B,WAAG,0BAAH,EAA+B,YAAY;AACvC,gBAAI,eAAe;AACf,sBAAO,iBAAM,IAAN;AADQ,aAAnB;AAGA,6BAAM,IAAN,mBAAmB,cAAnB,EAAmC,OAAnC,CAA2C,YAA3C;AACA,gBAAI,MAAM,oBAAV;AACA,gBAAI,IAAJ,CAAS,SAAT;AACA,mCAAO,aAAa,IAApB,EAA0B,EAA1B,CAA6B,EAA7B,CAAgC,UAAhC,CACK,UADL,CACgB,SADhB;AAEA,6BAAO,YAAP,CAAoB,OAApB;AACH,SAVD;AAWH,KAbD;;AAeA,aAAS,OAAT,EAAkB,YAAY;;AAE1B,WAAG,0BAAH,EAA+B,YAAY;AACvC,gBAAI,eAAe;AACf,sBAAO,iBAAM,IAAN;AADQ,aAAnB;AAGA,6BAAM,IAAN,mBAAmB,cAAnB,EAAmC,OAAnC,CAA2C,YAA3C;AACA,gBAAI,MAAM,oBAAV;AACA,gBAAI,IAAJ,CAAS,SAAT;AACA,mCAAO,aAAa,IAApB,EAA0B,EAA1B,CAA6B,EAA7B,CAAgC,UAAhC,CACK,UADL,CACgB,SADhB;AAEA,6BAAO,YAAP,CAAoB,OAApB;AACH,SAVD;AAWH,KAbD;;AAeA,aAAS,QAAT,EAAmB,YAAY;;AAE3B,WAAG,2BAAH,EAAgC,YAAY;AACxC,gBAAI,eAAe;AACf,uBAAQ,iBAAM,IAAN;AADO,aAAnB;AAGA,6BAAM,IAAN,mBAAmB,cAAnB,EAAmC,OAAnC,CAA2C,YAA3C;AACA,gBAAI,MAAM,oBAAV;AACA,gBAAI,KAAJ,CAAU,SAAV;AACA,mCAAO,aAAa,KAApB,EAA2B,EAA3B,CAA8B,EAA9B,CAAiC,UAAjC,CACK,UADL,CACgB,SADhB;AAEA,6BAAO,YAAP,CAAoB,OAApB;AACH,SAVD;AAWH,KAbD;;AAeA,aAAS,QAAT,EAAmB,YAAY;;AAE3B,WAAG,2BAAH,EAAgC,YAAY;AACxC,gBAAI,eAAe;AACf,uBAAQ,iBAAM,IAAN;AADO,aAAnB;AAGA,6BAAM,IAAN,mBAAmB,cAAnB,EAAmC,OAAnC,CAA2C,YAA3C;AACA,gBAAI,MAAM,oBAAV;AACA,gBAAI,KAAJ,CAAU,SAAV;AACA,mCAAO,aAAa,KAApB,EAA2B,EAA3B,CAA8B,EAA9B,CAAiC,UAAjC,CACK,UADL,CACgB,SADhB;AAEA,6BAAO,YAAP,CAAoB,OAApB;AACH,SAVD;AAWH,KAbD;AAcH,CA1ED","file":"logger.js","sourcesContent":["/**\n * Logger Test\n */\n\n\"use strict\";\n\n\n/* Node modules */\nimport bunyan from \"bunyan\";\n\n/* Third-party modules */\n\n\n/* Files */\nimport {expect, proxyquire, sinon} from \"../../helpers/configure\";\nimport {Logger} from \"../../../src/lib/logger\";\n\n\ndescribe(\"Logger\", function () {\n\n    describe(\"Methods\", function () {\n\n        describe(\"#constructor\", function () {\n\n            it(\"should start a bunyan logger\", function () {\n                sinon.stub(bunyan, \"createLogger\").returns(\"logger\");\n                let obj = new Logger();\n                expect(obj._log).to.be.equal(\"logger\");\n                bunyan.createLogger.restore();\n            });\n        });\n    });\n\n    describe(\"#info\", function () {\n\n        it(\"should create a info log\", function () {\n            let bunyanLogger = {\n                info : sinon.stub()\n            };\n            sinon.stub(bunyan, \"createLogger\").returns(bunyanLogger);\n            let obj = new Logger();\n            obj.info(\"testing\");\n            expect(bunyanLogger.info).to.be.calledOnce\n                .calledWith(\"testing\");\n            bunyan.createLogger.restore();\n        });\n    });\n\n    describe(\"#warn\", function () {\n\n        it(\"should create a warn log\", function () {\n            let bunyanLogger = {\n                warn : sinon.stub()\n            };\n            sinon.stub(bunyan, \"createLogger\").returns(bunyanLogger);\n            let obj = new Logger();\n            obj.warn(\"testing\");\n            expect(bunyanLogger.warn).to.be.calledOnce\n                .calledWith(\"testing\");\n            bunyan.createLogger.restore();\n        });\n    });\n\n    describe(\"#error\", function () {\n\n        it(\"should create a error log\", function () {\n            let bunyanLogger = {\n                error : sinon.stub()\n            };\n            sinon.stub(bunyan, \"createLogger\").returns(bunyanLogger);\n            let obj = new Logger();\n            obj.error(\"testing\");\n            expect(bunyanLogger.error).to.be.calledOnce\n                .calledWith(\"testing\");\n            bunyan.createLogger.restore();\n        });\n    });\n\n    describe(\"#fatal\", function () {\n\n        it(\"should create a fatal log\", function () {\n            let bunyanLogger = {\n                fatal : sinon.stub()\n            };\n            sinon.stub(bunyan, \"createLogger\").returns(bunyanLogger);\n            let obj = new Logger();\n            obj.fatal(\"testing\");\n            expect(bunyanLogger.fatal).to.be.calledOnce\n                .calledWith(\"testing\");\n            bunyan.createLogger.restore();\n        });\n    });\n});\n"]}