{"version":3,"sources":["../../../../test/unit/services/customer.js"],"names":[],"mappings":"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","file":"customer.js","sourcesContent":["/**\n * postgres\n */\n\"use strict\";\n\n/* Node modules */\n\n\n/* Third-party modules */\n\n\n/* Files */\nimport {expect, proxyquire, sinon} from \"../../helpers/configure\";\n\nimport {CustomerService} from \"../../../src/services/customer\";\nimport {CustomerStore} from \"../../../src/stores/customer\";\nimport {Logger} from \"../../../src/lib/logger\";\n\n\ndescribe(\"Customer Service test\", function () {\n\n    describe(\"Methods\", function () {\n\n        describe(\"#constructor\", function () {\n\n            it(\"should set the store to the class\", function () {\n\n                let customerStore = {};\n                let logger = {};\n\n                let customerService = new CustomerService(customerStore, logger);\n                expect(customerService._customerStore).to.be.equal(customerStore);\n                expect(customerService._logger).to.be.equal(logger);\n\n            });\n        });\n\n        describe(\"#get\", function () {\n\n            it(\"should return customers when valid date range is provided\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"get\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let req = {\n                    from: \"2016-04-14\",\n                    to: \"2016-04-22\"\n                };\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.get(req)\n                    .then(customer => {\n                        expect(customer).to.be.equal(customer);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(logger.error).to.be.callCount(0);\n                    });\n\n            });\n\n            it(\"should return customers when from date is greater than to date\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"get\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let req = {\n                    to: \"2016-04-14\",\n                    from: \"2016-04-22\"\n                };\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.get(req)\n                    .then(() => {\n                        throw new Error(\"Test Failed\");\n                    })\n                    .catch(err => {\n                        expect(err).to.be.instanceOf(Error);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(logger.error).to.be.callCount(1);\n                    });\n\n            });\n\n            it(\"should return error when invalid from date is provided\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"get\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let req = {\n                    from: \"invalid date\",\n                    to: \"2016-04-22\"\n                };\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.get(req)\n                    .then(() => {\n                        throw new Error(\"Test Failed\");\n                    })\n                    .catch(err => {\n                        expect(err).to.be.instanceOf(Error);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(logger.error).to.be.callCount(1);\n                    });\n\n            });\n\n            it(\"should return error when invalid to date is provided\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"get\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let req = {\n                    from: \"2016-04-22\",\n                    to: \"invalid date\"\n                };\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.get(req)\n                    .then(() => {\n                        throw new Error(\"Test Failed\");\n                    })\n                    .catch(err => {\n                        expect(err).to.be.instanceOf(Error);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(logger.error).to.be.callCount(1);\n                    });\n            });\n\n            it(\"should return customers when no date is provided\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"get\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.get({})\n                    .then(customer => {\n                        expect(customer).to.be.equal(customer);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(logger.error).to.be.callCount(0);\n                    });\n            });\n        });\n\n        describe(\"#getById\", function () {\n\n            it(\"should return customer details when searched by customerId\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"getById\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.getById(\"123456\")\n                    .then(cust => {\n                        expect(cust).to.be.equal(customer);\n                        expect(customerStore.getById).to.be.callCount(1)\n                            .calledWithExactly(\"123456\");\n                    });\n            });\n        });\n\n        describe(\"#getByMerlinAccountNo\", function () {\n\n            it(\"should return customer details when searched by merlinAccountNo\", function () {\n\n                let customerStore = new CustomerStore();\n                let customer = {\n                    data: \"customer details\"\n                };\n                sinon.stub(customerStore, \"getByMerlinAccountNo\").resolves(customer);\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n                sinon.stub(logger, \"error\").returns(true);\n\n                let customerService = new CustomerService(customerStore, logger);\n                return customerService.getByMerlinAccountNo(\"123456\")\n                    .then(cust => {\n                        expect(cust).to.be.equal(customer);\n                        expect(customerStore.getByMerlinAccountNo).to.be.callCount(1)\n                            .calledWithExactly(\"123456\");\n                    });\n            });\n        });\n    });\n});\n"]}