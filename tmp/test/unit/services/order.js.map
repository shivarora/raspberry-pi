{"version":3,"sources":["../../../../test/unit/services/order.js"],"names":[],"mappings":"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","file":"order.js","sourcesContent":["/**\n * postgres\n */\n\"use strict\";\n\n/* Node modules */\n\n\n/* Third-party modules */\n\n\n/* Files */\nimport {expect, proxyquire, sinon} from \"../../helpers/configure\";\n\nimport {OrderService} from \"../../../src/services/order\";\nimport {OrderStore} from \"../../../src/stores/order\";\nimport {Logger} from \"../../../src/lib/logger\";\n\n\ndescribe(\"Order Service test\", function () {\n\n    describe(\"Methods\", function () {\n\n        describe(\"#constructor\", function () {\n\n            it(\"should set the store to the class\", function () {\n\n                let orderStore = {};\n                let logger = {};\n\n                let orderService = new OrderService(orderStore, logger);\n                expect(orderService._orderStore).to.be.equal(orderStore);\n                expect(orderService._logger).to.be.equal(logger);\n\n            });\n        });\n    });\n\n    describe(\"#get\", function () {\n\n        it(\"should return orders when valid date range is provided\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from : \"2016-04-14\",\n                to : \"2016-04-22\"\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(order => {\n                    expect(order).to.be.equal(order);\n                    expect(logger.info).to.be.callCount(3);\n                    expect(logger.error).to.be.callCount(0);\n                });\n        });\n\n        it(\"should return orders when no date range is provided\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {};\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(order => {\n                    expect(order).to.be.equal(order);\n                    expect(logger.info).to.be.callCount(3);\n                    expect(logger.error).to.be.callCount(0);\n                });\n        });\n\n        it(\"should return error when from date is greater than to date\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                to : \"2016-04-14\",\n                from : \"2016-04-22\",\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(() => {\n                    throw new Error(\"Test failed\");\n                })\n                .catch((err) => {\n\n                    expect(err.message).to.be.equal(\n                        \"From date cannot be greater than to date.\"\n                    );\n                    expect(err).to.be.instanceOf(Error);\n                    expect(logger.info).to.be.callCount(1);\n                    expect(logger.error).to.be.callCount(1);\n\n                });\n        });\n\n        it(\"should return error when invalid date is provided\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                to : \"invalid date\",\n                from : \"invalid date\",\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(() => {\n                    throw new Error(\"Test failed\");\n                })\n                .catch((err) => {\n\n                    expect(err.message).to.be.equal(\n                        \"Invalid from or to date please make sure the date format is YYYY-MM-DD\"\n                    );\n                    expect(err).to.be.instanceOf(Error);\n                    expect(logger.info).to.be.callCount(1);\n                    expect(logger.error).to.be.callCount(1);\n\n                });\n        });\n\n        it(\"should return error when from date is valid but to date is invalid\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                to : \"invalid date\",\n                from : \"invalid date\",\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(() => {\n                    throw new Error(\"Test failed\");\n                })\n                .catch((err) => {\n\n                    expect(err.message).to.be.equal(\n                        \"Invalid from or to date please make sure the date format is YYYY-MM-DD\"\n                    );\n                    expect(err).to.be.instanceOf(Error);\n                    expect(logger.info).to.be.callCount(1);\n                    expect(logger.error).to.be.callCount(1);\n\n                });\n        });\n\n        it(\"should return order when no payment method is provided\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from : \"2016-04-22\",\n                to : \"invalid date\"\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(() => {\n                    throw new Error(\"Test failed\");\n                })\n                .catch(err => {\n                    expect(err).to.be.instanceOf(Error);\n                    expect(logger.info).to.be.callCount(1);\n                    expect(logger.error).to.be.callCount(1);\n                });\n        });\n\n        it(\"should return order when payment type is dispatched\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from : \"2016-04-14\",\n                to : \"2016-04-22\",\n                payment : [\n                    \"dispatched\"\n                ]\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(order => {\n                    expect(order).to.be.equal(order);\n                    expect(logger.info).to.be.callCount(3);\n                    expect(logger.error).to.be.callCount(0);\n                });\n        });\n\n        it(\"should return order when payment type is paid\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from : \"2016-04-14\",\n                to : \"2016-04-22\",\n                payment : [\n                    \"paid\"\n                ]\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(order => {\n                    expect(order).to.be.equal(order);\n                    expect(logger.info).to.be.callCount(3);\n                    expect(logger.error).to.be.callCount(0);\n                });\n        });\n\n        it(\"should return error when payment type is invalid\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from : \"2016-04-14\",\n                to : \"2016-04-22\",\n                payment : [\n                    \"not valid payment status\"\n                ]\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(() => {\n                    throw new Error(\"Test Failed\");\n                })\n                .catch(err => {\n                    expect(err).to.be.instanceOf(Error);\n                    expect(logger.info).to.be.callCount(2);\n                    expect(logger.error).to.be.callCount(2);\n                });\n        });\n\n        it(\"should ignore order all payment methods if payment type is set to paid\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data :\"order details\"\n            };\n            sinon.stub(orderStore, \"get\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from : \"2016-04-14\",\n                to : \"2016-04-22\",\n                payment : [\n                    \"paid\",\n                    \"partial_dispatched\",\n                    \"dispatched\",\n                    \"payment_authorised\",\n                    \"pending\"\n                ]\n            };\n\n            let orderService = new OrderService(orderStore,logger);\n            return orderService.get(req)\n                .then(order => {\n                    expect(order).to.be.equal(order);\n                    expect(logger.info).to.be.callCount(3);\n                    expect(logger.error).to.be.callCount(0);\n                });\n        });\n    });\n\n    describe(\"#getById\", function () {\n\n        it(\"should return orders details when searched by order reference\", function () {\n\n            let orderStore = new OrderStore();\n            let order = {\n                data: \"order details\"\n            };\n            sinon.stub(orderStore, \"getById\").resolves(order);\n\n            let logger = new Logger();\n            sinon.stub(logger, \"info\").returns(true);\n            sinon.stub(logger, \"error\").returns(true);\n\n            let req = {\n                from: \"2016-04-14\",\n                to: \"2016-04-22\"\n            };\n\n            let orderService = new OrderService(orderStore, logger);\n            return orderService.getById(req)\n                .then(order => {\n                    expect(order).to.be.equal(order);\n                    expect(logger.info).to.be.callCount(0);\n                    expect(logger.error).to.be.callCount(0);\n                });\n        });\n    });\n\n});\n"]}