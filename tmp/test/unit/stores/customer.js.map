{"version":3,"sources":["../../../../test/unit/stores/customer.js"],"names":[],"mappings":"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","file":"customer.js","sourcesContent":["/**\n * postgres\n */\n\"use strict\";\n\n/* Node modules */\n\n\n/* Third-party modules */\n\n\n/* Files */\nimport {expect, proxyquire, sinon} from \"../../helpers/configure\";\n\nlet CustomerModel = require(\"../../../src/resources/customerModel\");\nimport {CustomerStore} from \"../../../src/stores/customer\";\nimport {Logger} from \"../../../src/lib/logger\";\n\n\ndescribe(\"Customer Store test\", function () {\n\n    describe(\"Methods\", function () {\n\n        describe(\"#constructor\", function () {\n\n            it(\"should set the model to the class\", function () {\n\n                let logger = {};\n                let customerStore = new CustomerStore(CustomerModel, logger);\n                expect(customerStore._customerModel).to.be.equal(CustomerModel);\n                expect(customerStore._logger).to.be.equal(logger);\n\n            });\n        });\n\n        describe(\"#get\", function () {\n\n            it(\"should get customer when correct filter is provided\", function () {\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n\n                let customer = {\n                    \"customer\": \"customer\"\n                };\n\n                let lt = sinon.stub().resolves(customer);\n\n                let gt = sinon.stub().returns({lt});\n\n                let where = sinon.stub().returns({gt});\n\n                let customerModel = {\n                    find : sinon.stub().returns({where})\n                };\n\n                let filters = {\n                    \"from\": \"2016-04-21\",\n                    \"to\": \"2016-04-22\"\n                };\n\n                let customerStore = new CustomerStore(customerModel, logger);\n                return customerStore.get(filters)\n                    .then(cust => {\n                        expect(cust).to.be.equal(customer);\n                        expect(logger.info).to.be.callCount(1);\n                    });\n            });\n        });\n\n        describe(\"#getById\", function () {\n\n            it(\"should return customer when customerId is provided\", function () {\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n\n                let customer = {\n                    \"customer\": \"customer\"\n                };\n\n                let customerModel = {\n                    findOne: sinon.stub().resolves(customer)\n                };\n\n                let customerStore = new CustomerStore(customerModel, logger);\n                return customerStore.getById(\"123456789\")\n                    .then(cust => {\n                        expect(cust).to.be.equal(customer);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(customerModel.findOne).to.be.callCount(1)\n                            .calledWithExactly({customerId : \"123456789\"});\n                    });\n            });\n        });\n\n        describe(\"#getByMerlinAccountNo\", function () {\n\n            it(\"should return customer when customerId is provided\", function () {\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n\n                let customer = {\n                    \"customer\": \"customer\"\n                };\n\n                let customerModel = {\n                    findOne: sinon.stub().resolves(customer)\n                };\n\n                let customerStore = new CustomerStore(customerModel, logger);\n                return customerStore.getByMerlinAccountNo(\"123456789\")\n                    .then(cust => {\n                        expect(cust).to.be.equal(customer);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(customerModel.findOne).to.be.callCount(1)\n                            .calledWithExactly({merlinAccountNo : \"123456789\"});\n                    });\n            });\n        });\n\n    });\n});\n"]}