{"version":3,"sources":["../../../../test/unit/stores/order.js"],"names":[],"mappings":"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","file":"order.js","sourcesContent":["/**\n * postgres\n */\n\"use strict\";\n\n/* Node modules */\n\n\n/* Third-party modules */\n\n\n/* Files */\nimport {expect, proxyquire, sinon} from \"../../helpers/configure\";\n\nlet OrderModel = require(\"../../../src/resources/orderModel\");\nimport {OrderStore} from \"../../../src/stores/order\";\nimport {Logger} from \"../../../src/lib/logger\";\n\n\ndescribe(\"Order Store test\", function () {\n\n    describe(\"Methods\", function () {\n\n        describe(\"#constructor\", function () {\n\n            it(\"should set the model to the class\", function () {\n\n                let logger = {};\n                let orderStore = new OrderStore(OrderModel, logger);\n                expect(orderStore._orderModel).to.be.equal(OrderModel);\n                expect(orderStore._logger).to.be.equal(logger);\n\n            });\n        });\n\n        describe(\"#get\", function () {\n\n            it(\"should return order when date is provided but no payment type is provided\", function () {\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n\n                let order = {\n                    \"order\" : \"order\"\n                };\n\n                let lt = sinon.stub().resolves(order);\n\n                let gt = sinon.stub().returns({lt});\n\n                let where = sinon.stub().returns({gt});\n\n                let orderModel = {\n                    find : sinon.stub().returns({where})\n                };\n\n                let filters = {\n                    \"from\":\"2016-04-21\",\n                    \"to\":\"2016-04-22\",\n                    \"paymentType\" : []\n                };\n\n                let orderStore = new OrderStore(orderModel,logger);\n                return orderStore.get(filters)\n                    .then(order => {\n                        expect(order).to.be.equal(order);\n                        expect(logger.info).to.be.callCount(2);\n                    });\n            });\n\n            it(\"should return order when date and payment type is provided\", function () {\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n\n                let order = {\n                    \"order\" : \"order\"\n                };\n\n                let where = sinon.stub().returns({in : sinon.stub().resolves(order)});\n\n                let lt = sinon.stub().returns({where});\n\n                let gt = sinon.stub().returns({lt});\n\n                where = sinon.stub().returns({gt});\n\n                let orderModel = {\n                    find : sinon.stub().returns({where})\n                };\n\n                let filters = {\n                    \"from\":\"2016-04-21\",\n                    \"to\":\"2016-04-22\",\n                    \"paymentType\" : [\"paid\"]\n                };\n\n                let orderStore = new OrderStore(orderModel,logger);\n                return orderStore.get(filters)\n                    .then(order => {\n                        expect(order).to.be.equal(order);\n                        expect(logger.info).to.be.callCount(2);\n                    });\n            });\n        });\n\n        describe(\"#getById\", function () {\n\n            it(\"should return order when order reference is provided\", function () {\n\n                let logger = new Logger();\n                sinon.stub(logger, \"info\").returns(true);\n\n                let order = {\n                    \"order\": \"order\"\n                };\n\n                let orderModel = {\n                    findOne: sinon.stub().resolves(order)\n                };\n\n                let orderStore = new OrderStore(orderModel, logger);\n                return orderStore.getById(\"123456789\")\n                    .then(order => {\n                        expect(order).to.be.equal(order);\n                        expect(logger.info).to.be.callCount(1);\n                        expect(orderModel.findOne).to.be.callCount(1)\n                            .calledWithExactly({merlinOrderReference : \"123456789\"});\n                    });\n            });\n        });\n\n    });\n});\n"]}